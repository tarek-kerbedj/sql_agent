from langchain.agents import Tool
import os
import streamlit as st
from langchain.chat_models import ChatOpenAI
from langchain.agents import *
from langchain.llms import OpenAI
from plotly.graph_objs import Figure
import plotly.graph_objects as go

from langchain.sql_database import SQLDatabase
from langchain.agents.agent_toolkits import SQLDatabaseToolkit

import pandas as pd
import json
# Initialize the chat2plot tool
def preprocess_visuals(full_response):
    data_dict = json.loads(full_response)
    title=data_dict['layout']['title']
 
    chart_type = data_dict['data'][0]['type']
    if chart_type=="line":
        x_values = data_dict['data'][0]['x']
        y_values = data_dict['data'][0]['y']
       
    elif chart_type=='pie':
        x_values = data_dict['data'][0]['values']
        y_values = data_dict['data'][0]['labels']
     
    elif chart_type=='bar':
        x_values = data_dict['data'][0]['x']
        y_values = data_dict['data'][0]['y']

    fig = go.Figure()
    if chart_type == 'bar':
        fig.add_trace(go.Bar(x=x_values, y=y_values))
        fig.update_layout(title_text=title)
        return fig
        #st.plotly_chart(fig ,use_container_width=True)
    elif chart_type == 'line':
            fig.add_trace(go.Scatter(x=x_values, y=y_values, mode='lines'))
            fig.update_layout(title_text=title)
            return fig
            #st.plotly_chart(fig, use_container_width=True)
    elif chart_type == 'pie':
            #fig.add_trace(go.Figure(data=[go.Pie(labels=y_values, values=x_values)]))
            fig.add_trace(go.Pie(labels=x_values,values=x_values))
            fig.update_layout(title_text=title)
            return fig

# def chat2plot_plot(df,input_string):

#     # Assuming df is globally defined or passed somehow
#     # Pass a dataframe to draw
#     c2p = chat2plot(df,description_strategy="dtypes")
    
#     # Make a question about the data
#     result = c2p(input_string)
#     return result
    # if isinstance(result.figure, Figure):
    #     return st.plotly_chart(result.figure, use_container_width=True)
    # else:

    #     return st.vega_lite_chart(df, result.config, use_container_width=True)
    #return result.figure.show()  # draw a plot
    # print(result.config)  # get a config (json / dataclass)
    # print(result.explanation)  # see the explanation generated by LLM

    # you can make follow-up request to refine the chart
    # result = c2p("change to horizontal-bar chart")
    # result.figure.show()
    #return "done"


# chat2plot_tool = Tool(
#     name='Chat2Plot',
#     func=chat2plot_tool,
#     description='Useful for creating data visualizations based on natural language queries.'
# )

# When giving tools to LLM, we must pass as list of tools
#tools = [chat2plot_tool]


# agent = create_pandas_dataframe_agent(
#     OpenAI(temperature=0),
#     df,
#     verbose=True,
#     tools=tools
# )

# c2p = chat2plot(df)
#query=st.text_input('whats your query?')
# if query:
#     pass
#     result = c2p(query)
#     if isinstance(result.figure, Figure):

#         st.plotly_chart(result.figure, use_container_width=True)
#     else:
#         st.vega_lite_chart(df, result.config, use_container_width=True)
    #result.figure.show()
# db = SQLDatabase.from_uri("sqlite:///transactions_10.db")
# toolkit = SQLDatabaseToolkit(db=db)







# # Initialize the agent with the new tool
# agent_executor = create_sql_agent(
#     llm=llm,
#     toolkit=toolkit,
#     tools=tools,
#     verbose=True
# )
